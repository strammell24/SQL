# In this SQL project, I used mathematical operators to calculate and retrieve data about participants in a marathon.

# For this SQL project, I used the following data set:

CREATE TABLE marathon (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
   participant_name TEXT,
   previous_experience TEXT,
   completion_fraction REAL);

INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Sadie Hawkins", "yes", 1);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Brandon Flowers", "no", 0.241);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Michael Scott", "no", 0.804);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Karamo Brown", "yes", 0.9512);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Antoni Porowski", "yes", 0.640);
INSERT INTO marathon (participant_name, previous_experience,  completion_fraction)
    VALUES ("Rajnighanda Kapoor", "no", 1);

#1. I used multiplication in SQL to calculate the percentage of the marathan that each parcipant completed: 

SELECT participant_name, 
completion_fraction*100 as percentage_completed
FROM marathon; 

#2. I used the ROUND function to calculate the percentage of the marathon completed, to one decimal place, for every participant in the marathon: 

SELECT participant_name, 
ROUND(completion_fraction*100,1) as percentage_completed
FROM marathon;

#3. I used the COUNT function and CASE statement to create a new column that showed the number of employees that completed different quarters: 

SELECT COUNT(*), 
CASE 
WHEN completion_fraction >=.75 THEN "75%+"
WHEN completion_fraction >=.50 THEN "50%+"
WHEN completion_fraction >=.25 THEN "25%+"
ELSE "Under 25%"
END AS "quarter_completed"
FROM marathon
GROUP BY quarter_completed;
